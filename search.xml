<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/20/hello-world/"/>
      <url>/2019/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用模板汇总</title>
      <link href="/2019/12/20/chang-yong-mo-ban-hui-zong/"/>
      <url>/2019/12/20/chang-yong-mo-ban-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="SPFA单源最短路"><a href="#SPFA单源最短路" class="headerlink" title="SPFA单源最短路"></a>SPFA单源最短路</h1><pre><code>struct nod{    int to,w;};vector &lt;nod&gt; g[100005];bool vis[500005];int dis[100005];int n,m,s;void spfa(){    dis[s]=0;    queue&lt;int&gt; q;    q.push(s);    while(!q.empty())    {        int now=q.front();q.pop();        vis[now]=0;        for(int i=0;i&lt;g[now].size();i++)        {            nod nex=g[now][i];            if(dis[now]+nex.w&lt;dis[nex.to])            {                dis[nex.to]=dis[now]+nex.w;                if(!vis[nex.to])                {                    vis[nex.to]=1;                    q.push(nex.to);                }            }        }    }}int main(int argc, char const *argv[]){    read(n),read(m),read(s);    for(int i=1;i&lt;=m;i++)    {        int x,y,w;        read(x),read(y),read(w);        nod tmp;        tmp.to=y;tmp.w=w;        g[x].push_back(tmp);    }    for(int i=1;i&lt;=n;i++)        vis[i]=0,dis[i]=2147483647;    spfa();    for(int i=1;i&lt;=n;i++)    {        if(s==i)            printf("0 ");        else            printf("%d ",dis[i]);    }    return 0;}```c++# Tarjan求LCA``` C#include&lt;bits/stdc++.h&gt;#define MAXN 500005using namespace std;typedef long long LL;int fa[MAXN],xx[MAXN],yy[MAXN];int n,m,q;map &lt;int,int&gt; ans[MAXN];vector&lt;int&gt; edge[MAXN],cha[MAXN];bool vis[MAXN];inline void read(int &amp;x){    x=0;int f=1;char ch=getchar();    while(ch&lt;'0'||ch&gt;'9'){if(ch=='-')f=-1;ch=getchar();}    while(ch&gt;='0'&amp;&amp;ch&lt;='9'){x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);ch=getchar();}    x*=f;}void init(){    for(int i=1;i&lt;=n;i++)        fa[i]=i;}int getfa(int x){    return fa[x]==x?x:fa[x]=getfa(fa[x]);}void unio(int x,int y){    int xx=getfa(x),yy=getfa(y);    if(xx!=yy)        fa[yy]=xx;}void tarjan(int x,int la){    int lens=edge[x].size();    for(int i=0;i&lt;lens;i++)    {        if(edge[x][i]!=la)        {            tarjan(edge[x][i],x);            unio(x,edge[x][i]);            vis[edge[x][i]]=1;         }    }    lens=cha[x].size();    for(int i=0;i&lt;lens;i++)        if(vis[cha[x][i]])        {            ans[x][cha[x][i]]=getfa(cha[x][i]);            ans[cha[x][i]][x]=getfa(cha[x][i]);        }}int main(){    read(n),read(m),read(q);    init();    for(int i=1;i&lt;n;i++)    {        int u,v;        read(u),read(v);        edge[u].push_back(v);        edge[v].push_back(u);    }    for(int i=1;i&lt;=m;i++)    {        read(xx[i]),read(yy[i]);        cha[xx[i]].push_back(yy[i]);        cha[yy[i]].push_back(xx[i]);    }    tarjan(q,0);    for(int i=1;i&lt;=m;i++)        printf("%d\n",ans[xx[i]][yy[i]]);    return 0;}</code></pre><h1 id="最小生成树kruskal"><a href="#最小生成树kruskal" class="headerlink" title="最小生成树kruskal"></a>最小生成树kruskal</h1><pre class="line-numbers language-C++"><code class="language-C++">struct nod{    int x,y,w;}e[400005];int fa[400005];int n,m;bool cmp(nod a,nod b){    return a.w<b.w;}int find(int x){    if(fa[x]==x)        return x;    return fa[x]=find(fa[x]);}int main(int argc, char const *argv[]){    read(n),read(m);    int ans=0;    for(int i=1;i<=m;i++)        read(e[i].x),read(e[i].y),read(e[i].w);    for(int i=1;i<=n;i++)        fa[i]=i;    stable_sort(e+1,e+m+1,cmp);    for(int i=1;i<=m;i++)    {        int u=find(e[i].x),v=find(e[i].y);        if(u==v) continue;        ans+=e[i].w;        fa[u]=v;    }    if(!ans)        printf("orz\n");    else        printf("%d\n",ans);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><pre><code>priority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; q1;priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; q2;``` C++# 斐波那契数列递推</code></pre><p>ll a[3][3];<br>ll res[3][3],ans[3][3];</p><p>void mul(ll x[3][3],ll y[3][3])<br>{<br>    memset(res,0,sizeof(res));<br>    for(int i=1;i&lt;=2;i++)<br>        for(int j=1;j&lt;=2;j++)<br>            for(int k=1;k&lt;=2;k++)<br>                res[i][j]=(res[i][j]+x[i][k]*y[k][j])%mod;<br>    for(int i=1;i&lt;=2;i++)<br>        for(int j=1;j&lt;=2;j++)<br>            x[i][j]=res[i][j];<br>}</p><p>int main()<br>{<br>    n-=2;<br>    a[1][1]=1,a[1][2]=1,a[2][1]=1,a[2][2]=0;<br>    ans[1][1]=1,ans[1][2]=1;<br>    while(n)<br>    {<br>        if(n&amp;1)<br>            mul(ans,a);<br>    n&gt;&gt;=1;<br>    mul(a,a);<br>    }<br>    printf(“%lld\n”,ans[1][1]);<br>}</p><pre><code># 矩阵快速幂``` Cssstruct nod{    long long a[105][105];};nod a,b,c;inline void out(nod c){    for(int i=1;i&lt;=n;i++)    {        for(int j=1;j&lt;=n;j++)            cout&lt;&lt;c.a[i][j]&lt;&lt;" ";        cout&lt;&lt;endl;    }}inline nod mul(nod a,nod b){    nod ans;    memset(ans.a,0,sizeof(ans.a));    for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=n;j++)            for(int k=1;k&lt;=n;k++)            {                ans.a[i][j]=(ans.a[i][j]+(a.a[i][k]*b.a[k][j]))%mod;            }    return ans;}inline nod kuaisumi(nod a,int k){    nod ans;    for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=n;j++)        {            if(i==j) ans.a[i][j]=1;            else ans.a[i][j]=0;        }    while(k)    {        if(k&amp;1)            ans=mul(ans,a);        a=mul(a,a);        k&gt;&gt;=1;    }    return ans;}</code></pre><h1 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h1><pre class="line-numbers language-c++"><code class="language-c++">void work(){    for(int i=0;i<=n;i++)        c[i][i]=c[i][0]=1;    for(int i=2;i<=n;i++)        for(int j=1;j<=i;j++)            c[i][j]=c[i-1][j-1]+c[i-1][j];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h1><pre class="line-numbers language-c++"><code class="language-c++">    #ifndef file    char IN[105]=".in";    char OUT[105]=".out";    freopen(IN,"r",stdin);    freopen(OUT,"w",stdout);    #endif    #ifndef file    fclose(stdin);    fclose(stdout);    #endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二分排序"><a href="#二分排序" class="headerlink" title="二分排序"></a>二分排序</h1><pre class="line-numbers language-c++"><code class="language-c++">int A(int l,int r){    int mid=a[(l+r)/2];    int i=l,j=r;    while(i<=j)    {        while(a[i]<mid&&i<=r)            i++;        while(a[j]>mid&&j>=l)            j--;        if(i<=j)        {            swap(a[i],a[j]);            i++;            j--;        }    }        if(l<=j)            A(l,j);        if(i<=r)            A(i,r);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><pre class="line-numbers language-c++"><code class="language-c++">bool isprime[10005];int prime[5005];int top=1;memset(isprime,1,sizeof(isprime));for(int i=2;i<10000;i++){    if(isprime[i])        prime[top++]=i;    for(int j=1;j<top;j++)    {        if(i*prime[j]>10000)            break;        isprime[i*prime[j]]=0;        if(i%prime[j]==0)            break;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高精加"><a href="#高精加" class="headerlink" title="高精加"></a>高精加</h1><pre class="line-numbers language-c++"><code class="language-c++">string s,sx;int a[505],b[505],ans[505];int main(int argc, char const *argv[]){    cin>>s>>sx;    memset(a,sizeof(a),0);    memset(b,sizeof(b),0);    for(int i=0,pos=s.size();i<s.size();i++,pos--)        a[pos]=s[i]-'0';    for(int i=0,pos=sx.size();i<sx.size();i++,pos--)        b[pos]=sx[i]-'0';    int jinwei=0,len=max(s.size(),sx.size());    for(int i=1;i<=len;i++)    {        ans[i]=(a[i]+b[i]+jinwei)%10;        jinwei=(a[i]+b[i]+jinwei)/10;    }    if(jinwei)    {        cout<<jinwei;        for(int i=len;i;i--)            cout<<ans[i];    }    else        for(int i=len;i;i--)            cout<<ans[i];    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速读入"><a href="#快速读入" class="headerlink" title="快速读入"></a>快速读入</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><pre><code>inline void read(int &amp;x){    x=0;int f=1;    char ch=getchar();    while(ch&lt;'0'||ch&gt;'9'){        if(ch=='-')            f=-1;        ch=getchar();    }    while(ch&gt;='0'&amp;&amp;ch&lt;='9'){        x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48);        ch=getchar();    }    x*=f;}```C++## 实数（注意输入必须要包含小数点）</code></pre><p>inline void read(double &amp;x){<br>    x=0;int f=1;double y=1.0;<br>    char ch=getchar();<br>    while(ch&lt;’0’||ch&gt;’9’){<br>        if(ch==’-‘)<br>            f=-1;<br>        ch=getchar();<br>    }<br>    while(ch&gt;=’0’&amp;&amp;ch&lt;=’9’){<br>        x=(x<em>10)+(ch^48);<br>        ch=getchar();<br>    }<br>    ch=getchar();<br>    while(ch&gt;=’0’&amp;&amp; ch&lt;=’9’){<br>        x+=(y/=10)</em>(ch^48);<br>        ch=getchar();<br>    }<br>    x*=f;<br>}<br>```C++</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Blog-Open-Source/blog-demo1.gif" alt="演示Demo"></p><h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly" target="_blank" rel="noopener">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/" target="_blank" rel="noopener">https://shw2018.github.io</a>，博客演示：<a href="https://sunhwee.com" target="_blank" rel="noopener">sunhwee.com</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p><p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p></li><li><p>修改了原主题的一些很多<code>bug</code>   2019.08.05</p></li><li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p></li><li><p>增加<code>留言板</code>功能          2019.08.05</p></li><li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p></li><li><p>增加视听[视觉听觉影音]板块       2019.08.10</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p></li><li><p>增加网站运行时间显示  2019.08.10</p></li><li><p>增加<code>动漫模型</code>     2019.08.10</p></li><li><p>整体替换Banner图片和文章特色图片   2019.08.10</p></li><li><p>增加分类<code>相册</code>功能         2019.08.29</p></li><li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p></li><li><p>修改了一些控件的参数   2019.09.01</p></li><li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p></li><li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p></li><li><p>添加页面樱花飘落动效            2019.09.09</p></li><li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p></li><li><p>加入天气接口控件   2019.09.09</p></li><li><p>加入鼠标点击文字特效   2019.09.10</p></li><li><p>添加页面雪花飘落动效            2019.09.10</p></li><li><p>添加在线聊天插件            2019.09.12</p></li><li><p>持续更新…</p></li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>, 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
